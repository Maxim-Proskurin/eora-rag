"""
–•–µ–Ω–¥–ª–µ—Ä—ã Telegram-–±–æ—Ç–∞.
"""

import re

from aiogram import types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from app.bot.keyboards import get_provider_keyboard
from app.llm.gigachat.answer import generate_answer_gigachat
from app.llm.openai.answer import generate_answer_openai


def escape_markdown(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

async def start_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è EORA.\n\n"
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –∫–µ–π—Å–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ EORA, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ eora.ru.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:"
    )
    await message.answer(welcome_text, reply_markup=get_provider_keyboard())

async def provider_handler(callback_query: types.CallbackQuery, state):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    """
    data = callback_query.data or ""
    provider = data.split("_", 1)[1] if "_" in data else "gigachat"
    await state.update_data(provider=provider)
    if callback_query.message:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

def get_stop_keyboard():
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return kb

async def question_handler(message: types.Message, state):
    data = await state.get_data()
    provider = data.get("provider", "gigachat")
    question = message.text or ""
    if question.lower() in ("–∑–∞–≤–µ—Ä—à–∏—Ç—å", "—Å—Ç–æ–ø", "–≤—ã—Ö–æ–¥", "–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "/stop"):
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å—ã! –ï—Å–ª–∏ —á—Ç–æ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    collection_name = f"eora_{provider}"
    if provider == "gigachat":
        answer = generate_answer_gigachat(question, collection_name=collection_name)
    elif provider == "openai":
        answer = generate_answer_openai(question, collection_name=collection_name)
    else:
        answer = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä."
    await message.answer(answer[:4000], parse_mode="HTML", reply_markup=get_stop_keyboard())
    await message.answer("–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'.", reply_markup=get_stop_keyboard())
